// Code generated by goctl. DO NOT EDIT!
package model

import (
	"context"
	"time"

	"github.com/zeromicro/go-zero/core/stores/mon"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

type imageModel interface {
	Insert(ctx context.Context, data *Image) error
	FindOne(ctx context.Context, id string) (*Image, error)
	Update(ctx context.Context, data *Image) error
	Delete(ctx context.Context, id string) error
}

type defaultImageModel struct {
	conn *mon.Model
}

func newDefaultImageModel(conn *mon.Model) *defaultImageModel {
	return &defaultImageModel{conn: conn}
}

func (m *defaultImageModel) Insert(ctx context.Context, data *Image) error {
	if data.ID.IsZero() {
		data.ID = primitive.NewObjectID()
		data.CreateAt = time.Now()
		data.UpdateAt = time.Now()
	}

	_, err := m.conn.InsertOne(ctx, data)
	return err
}

func (m *defaultImageModel) FindOne(ctx context.Context, id string) (*Image, error) {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, ErrInvalidObjectId
	}

	var data Image

	err = m.conn.FindOne(ctx, &data, bson.M{"_id": oid})
	switch err {
	case nil:
		return &data, nil
	case mon.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultImageModel) Update(ctx context.Context, data *Image) error {
	data.UpdateAt = time.Now()

	_, err := m.conn.ReplaceOne(ctx, bson.M{"_id": data.ID}, data)
	return err
}

func (m *defaultImageModel) Delete(ctx context.Context, id string) error {
	oid, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return ErrInvalidObjectId
	}

	_, err = m.conn.DeleteOne(ctx, bson.M{"_id": oid})
	return err
}
